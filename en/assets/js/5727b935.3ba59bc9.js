"use strict";(self.webpackChunkpromptgineering=self.webpackChunkpromptgineering||[]).push([[2037],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function p(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?p(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):p(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},p=Object.keys(e);for(r=0;r<p.length;r++)n=p[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(r=0;r<p.length;r++)n=p[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,p=e.originalType,s=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),u=l(n),f=o,g=u["".concat(s,".").concat(f)]||u[f]||m[f]||p;return n?r.createElement(g,i(i({ref:t},c),{},{components:n})):r.createElement(g,i({ref:t},c))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var p=n.length,i=new Array(p);i[0]=f;var a={};for(var s in t)hasOwnProperty.call(t,s)&&(a[s]=t[s]);a.originalType=e,a[u]="string"==typeof e?e:o,i[1]=a;for(var l=2;l<p;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},91225:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>f,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var r=n(87462),o=(n(67294),n(3905));const p=n.p+"assets/images/openprompt-f07d4839f2e8035198a0db9a89391286.gif",i={sidebar_position:16},a="OpenPrompt",s={unversionedId:"tooling/IDEs/openprompt",id:"tooling/IDEs/openprompt",title:"OpenPrompt",description:"OpenPrompt is a Python library",source:"@site/docs/tooling/IDEs/openprompt.md",sourceDirName:"tooling/IDEs",slug:"/tooling/IDEs/openprompt",permalink:"/en/docs/tooling/IDEs/openprompt",draft:!1,editUrl:"https://github.com/trigaten/promptgineering/tree/v1.2.3/docs/tooling/IDEs/openprompt.md",tags:[],version:"current",sidebarPosition:16,frontMatter:{sidebar_position:16},sidebar:"tutorialSidebar",previous:{title:"Lang Chain",permalink:"/en/docs/tooling/IDEs/langchain"},next:{title:"OpenAI DALLE IDE",permalink:"/en/docs/tooling/IDEs/DALLE"}},l={},c=[{value:"Features",id:"features",level:2}],u={toc:c},m="wrapper";function f(e){let{components:t,...n}=e;return(0,o.kt)(m,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"openprompt"},"OpenPrompt"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://thunlp.github.io/OpenPrompt/index.html"},"OpenPrompt")," is a Python library\nthat provides various functionality for building and testing prompts."),(0,o.kt)("div",{style:{textAlign:"center"}},(0,o.kt)("img",{src:p,style:{width:"750px"}})),(0,o.kt)("h2",{id:"features"},"Features"),(0,o.kt)("p",null,"OpenPrompt supports models from huggingface, but not yet OpenAI. It focuses more\non datasets and testing than chaining. OpenPrompt also appears to support\nsoft-prompting via ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/thunlp/OpenDelta"},"https://github.com/thunlp/OpenDelta"),"."))}f.isMDXComponent=!0}}]);